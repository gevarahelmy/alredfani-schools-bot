#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุจูุช ุชููุฌุฑุงู ููุดุงุฑูุฉ ุงููุชุจ
"""

import logging
import sqlite3
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ุฑูุฒ ุงูุจูุช - ูุฌุจ ุงุณุชุจุฏุงูู ุจุฑูุฒ ุงูุจูุช ุงูุญูููู
BOT_TOKEN = "7819230561:AAGeMTOjrbmVoyk9Rg66Oe9Db6QSVAxZKjk"

# ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
def init_database():
    """ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฌุฏูู ุงููุชุจ"""
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS books (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            grade TEXT NOT NULL,
            subject TEXT NOT NULL,
            file_path TEXT NOT NULL,
            description TEXT
        )
    ''')
    
    # ุฅุถุงูุฉ ุจุนุถ ุงููุชุจ ุงูุชุฌุฑูุจูุฉ
    sample_books = [
        ("ูุชุงุจ ุงูุฑูุงุถูุงุช", "ุงูุตู ุงูุฃูู", "ุฑูุงุถูุงุช", "books/math_grade1.pdf", "ูุชุงุจ ุงูุฑูุงุถูุงุช ููุตู ุงูุฃูู ุงูุงุจุชุฏุงุฆู"),
        ("ูุชุงุจ ุงูุนููู", "ุงูุตู ุงูุฃูู", "ุนููู", "books/science_grade1.pdf", "ูุชุงุจ ุงูุนููู ููุตู ุงูุฃูู ุงูุงุจุชุฏุงุฆู"),
        ("ูุชุงุจ ุงููุบุฉ ุงูุนุฑุจูุฉ", "ุงูุตู ุงูุซุงูู", "ูุบุฉ ุนุฑุจูุฉ", "books/arabic_grade2.pdf", "ูุชุงุจ ุงููุบุฉ ุงูุนุฑุจูุฉ ููุตู ุงูุซุงูู"),
        ("ูุชุงุจ ุงูุฑูุงุถูุงุช", "ุงูุตู ุงูุซุงูู", "ุฑูุงุถูุงุช", "books/math_grade2.pdf", "ูุชุงุจ ุงูุฑูุงุถูุงุช ููุตู ุงูุซุงูู"),
        ("ูุชุงุจ ุงูุชุงุฑูุฎ", "ุงูุตู ุงูุซุงูุซ", "ุชุงุฑูุฎ", "books/history_grade3.pdf", "ูุชุงุจ ุงูุชุงุฑูุฎ ููุตู ุงูุซุงูุซ"),
    ]
    
    cursor.executemany('''
        INSERT OR IGNORE INTO books (title, grade, subject, file_path, description)
        VALUES (?, ?, ?, ?, ?)
    ''', sample_books)
    
    conn.commit()
    conn.close()

def search_books(query):
    """ุงูุจุญุซ ุนู ุงููุชุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    
    # ุงูุจุญุซ ูู ุงูุนููุงู ูุงูุตู ูุงููุงุฏุฉ
    cursor.execute('''
        SELECT * FROM books 
        WHERE title LIKE ? OR grade LIKE ? OR subject LIKE ?
        ORDER BY grade, subject, title
    ''', (f'%{query}%', f'%{query}%', f'%{query}%'))
    
    results = cursor.fetchall()
    conn.close()
    return results

def get_books_by_grade():
    """ุงูุญุตูู ุนูู ุงููุชุจ ูุฌูุนุฉ ุญุณุจ ุงูุตู"""
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT DISTINCT grade FROM books ORDER BY grade')
    grades = [row[0] for row in cursor.fetchall()]
    
    conn.close()
    return grades

def get_books_by_grade_name(grade):
    """ุงูุญุตูู ุนูู ุงููุชุจ ูุตู ูุนูู"""
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM books WHERE grade = ? ORDER BY subject, title', (grade,))
    results = cursor.fetchall()
    
    conn.close()
    return results

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุฃูุฑ /start"""
    welcome_message = """
๐พ๐ช ูุฑุญุจุงู ุจู ูู ุจูุช ALREDFANI SCHOOL SYSTEM ๐

ูุฐุง ุงูุจูุช ูุณุงุนุฏู ูู ุงูุนุซูุฑ ุนูู ุงููุชุจ ุงูุฏุฑุงุณูุฉ ูุชุญููููุง.

ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:
๐ /search <ุงุณู ุงููุชุงุจ ุฃู ุงููุงุฏุฉ> - ููุจุญุซ ุนู ูุชุงุจ ูุนูู
๐ /list - ูุนุฑุถ ูุงุฆูุฉ ุจุฌููุน ุงูุตููู ุงููุชุงุญุฉ
โน๏ธ /help - ูุนุฑุถ ูุฐู ุงูุฑุณุงูุฉ

ูุซุงู ููุจุญุซ:
/search ุฑูุงุถูุงุช
/search ุงูุตู ุงูุฃูู
/search ุนููู

ุงุณุชูุชุน ุจุงูุชุนูู! ๐
    """
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุฃูุฑ /help"""
    await start(update, context)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุฃูุฑ /search"""
    if not context.args:
        await update.message.reply_text(
            "ูุฑุฌู ูุชุงุจุฉ ูููุฉ ุงูุจุญุซ ุจุนุฏ ุงูุฃูุฑ.\n"
            "ูุซุงู: /search ุฑูุงุถูุงุช"
        )
        return
    
    query = ' '.join(context.args)
    books = search_books(query)
    
    if not books:
        await update.message.reply_text(
            f"ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุจ ุชุญุชูู ุนูู '{query}'.\n"
            "ุฌุฑุจ ุงูุจุญุซ ุจูููุงุช ุฃุฎุฑู ุฃู ุงุณุชุฎุฏู /list ูุนุฑุถ ุฌููุน ุงููุชุจ ุงููุชุงุญุฉ."
        )
        return
    
    # ุฅูุดุงุก ุฑุณุงูุฉ ุงููุชุงุฆุฌ
    message = f"๐ ูุชุงุฆุฌ ุงูุจุญุซ ุนู '{query}':\n\n"
    keyboard = []
    
    for book in books:
        book_id, title, grade, subject, file_path, description = book
        message += f"๐ {title}\n"
        message += f"๐ {grade} - {subject}\n"
        if description:
            message += f"๐ {description}\n"
        message += "\n"
        
        # ุฅุถุงูุฉ ุฒุฑ ุงูุชุญููู
        keyboard.append([InlineKeyboardButton(
            f"ุชุญููู {title}", 
            callback_data=f"download_{book_id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุฃูุฑ /list"""
    grades = get_books_by_grade()
    
    if not grades:
        await update.message.reply_text("ูุง ุชูุฌุฏ ูุชุจ ูุชุงุญุฉ ุญุงููุงู.")
        return
    
    message = "๐ ุงูุตููู ุงููุชุงุญุฉ:\n\n"
    keyboard = []
    
    for grade in grades:
        keyboard.append([InlineKeyboardButton(
            f"๐ {grade}", 
            callback_data=f"grade_{grade}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุงูุฃุฒุฑุงุฑ ุงููุถููุฉ"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("download_"):
        # ุชุญููู ูุชุงุจ
        book_id = int(data.split("_")[1])
        
        conn = sqlite3.connect('books.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM books WHERE id = ?', (book_id,))
        book = cursor.fetchone()
        conn.close()
        
        if book:
            book_id, title, grade, subject, file_path, description = book
            
            # ุงูุชุญูู ูู ูุฌูุฏ ุงูููู
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'rb') as file:
                        await query.message.reply_document(
                            document=file,
                            filename=f"{title}.pdf",
                            caption=f"๐ {title}\n๐ {grade} - {subject}"
                        )
                except Exception as e:
                    await query.message.reply_text(
                        f"ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุงููุชุงุจ: {str(e)}"
                    )
            else:
                await query.message.reply_text(
                    "ุนุฐุฑุงูุ ุงููุชุงุจ ุบูุฑ ูุชููุฑ ุญุงููุงู. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู."
                )
        else:
            await query.message.reply_text("ุนุฐุฑุงูุ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุชุงุจ.")
    
    elif data.startswith("grade_"):
        # ุนุฑุถ ูุชุจ ุตู ูุนูู
        grade = data.split("grade_", 1)[1]
        books = get_books_by_grade_name(grade)
        
        if not books:
            await query.message.reply_text(f"ูุง ุชูุฌุฏ ูุชุจ ูุชุงุญุฉ ูู {grade}.")
            return
        
        message = f"๐ ูุชุจ {grade}:\n\n"
        keyboard = []
        
        for book in books:
            book_id, title, grade, subject, file_path, description = book
            message += f"๐ {title} - {subject}\n"
            
            keyboard.append([InlineKeyboardButton(
                f"ุชุญููู {title}", 
                callback_data=f"download_{book_id}"
            )])
        
        # ุฅุถุงูุฉ ุฒุฑ ุงูุนูุฏุฉ
        keyboard.append([InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="back_to_list")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    elif data == "back_to_list":
        # ุงูุนูุฏุฉ ููุงุฆูุฉ ุงูุตููู
        grades = get_books_by_grade()
        
        message = "๐ ุงูุตููู ุงููุชุงุญุฉ:\n\n"
        keyboard = []
        
        for grade in grades:
            keyboard.append([InlineKeyboardButton(
                f"๐ {grade}", 
                callback_data=f"grade_{grade}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุตูุฉ ุงูุนุงุฏูุฉ"""
    text = update.message.text
    
    # ุฅุฐุง ูุงู ุงููุต ูุจุฏู ูุจุญุซุ ูู ุจุงูุจุญุซ
    if len(text) > 2:
        books = search_books(text)
        
        if books:
            message = f"๐ ูุชุงุฆุฌ ุงูุจุญุซ ุนู '{text}':\n\n"
            keyboard = []
            
            for book in books[:5]:  # ุนุฑุถ ุฃูู 5 ูุชุงุฆุฌ ููุท
                book_id, title, grade, subject, file_path, description = book
                message += f"๐ {title}\n"
                message += f"๐ {grade} - {subject}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"ุชุญููู {title}", 
                    callback_data=f"download_{book_id}"
                )])
            
            if len(books) > 5:
                message += f"... ูุนุซุฑุช ุนูู {len(books) - 5} ูุชุจ ุฃุฎุฑู\n"
                message += "ุงุณุชุฎุฏู /search ููุจุญุซ ุงูุฏููู"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                f"ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุจ ุชุญุชูู ุนูู '{text}'.\n"
                "ุฌุฑุจ ุงูุจุญุซ ุจูููุงุช ุฃุฎุฑู ุฃู ุงุณุชุฎุฏู /list ูุนุฑุถ ุฌููุน ุงููุชุจ ุงููุชุงุญุฉ."
            )
    else:
        await update.message.reply_text(
            "ูุฑุญุจุงู! ุงุณุชุฎุฏู /search ููุจุญุซ ุนู ูุชุงุจ ุฃู /list ูุนุฑุถ ุฌููุน ุงููุชุจ ุงููุชุงุญุฉ."
        )

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุชุดุบูู ุงูุจูุช"""
    # ุงูุชุญูู ูู ูุฌูุฏ ุฑูุฒ ุงูุจูุช
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("ูุฑุฌู ุชุนุฏูู BOT_TOKEN ูู ุงูููุฏ ููุถุน ุฑูุฒ ุงูุจูุช ุงูุญูููู")
        return
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    init_database()
    
    # ุฅูุดุงุก ูุฌูุฏ ุงููุชุจ ุฅุฐุง ูู ููู ููุฌูุฏุงู
    os.makedirs('books', exist_ok=True)
    
    # ุฅูุดุงุก ุงูุชุทุจูู
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ุฅุถุงูุฉ ุงููุนุงูุฌุงุช
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # ุชุดุบูู ุงูุจูุช
    print("ุชู ุจุฏุก ุชุดุบูู ุงูุจูุช...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

